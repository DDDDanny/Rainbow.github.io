<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>S-UIAutoTest（实现篇）</title>
    <link href="/2020/11/15/SUIAutoTestDo/"/>
    <url>/2020/11/15/SUIAutoTestDo/</url>
    
    <content type="html"><![CDATA[<p>上一篇文章主要写了我怎么设计的这个UI自动化测试框架，下面👇我来说说S-UIAutoTest具体的实现和使用。</p><a id="more"></a><h3 id="实现篇"><a href="#实现篇" class="headerlink" title="实现篇"></a>实现篇</h3><p>⚠️说在前面：</p><blockquote><p>编写UI自动化测试脚本，有三点非常重要：</p><ul><li>编写UI自动化测试脚本前，一定要是<code>熟悉业务</code>的，因为脱离了业务，任何自动化测试也变的没有了意义</li><li>定位元素不能仅限于定位到就可以，要去考虑使用的定位方式是否合理，维护成本是否很高</li><li>在编写UI自动化测试脚本时，要考虑逻辑是否可以复用，时间和空间复杂度如何，是否可以降低</li></ul></blockquote><p>下面👇我开始写如何实现UI自动化测试。</p><ol><li><p>选择定位方式</p><p>目前，框架中已经封装了一些常用的定位方式，其中最常用的是通过ClassName、Css选择器、Id这3中。具体使用哪一种定位方式，需要根据具体情况分析进行判断。（这里不建议使用Xpath定位，因为不好定位，并且维护成本较高，而且现在的一些前端组件库的组件会自动随机生成元素ID，这为Xpath定位加大了难度）</p></li><li><p>元素定位</p><p>要定位元素，首先要找到元素，浏览器F12进行操作即可，具体就不赘述了。找到元素后，要判断如何选择定位方式是合理的，这里有个基本原则，定位出来的元素总数不要过多，比如，你用ClassName定位，找出页面中有20多个元素，这就是不合理的，原则上是尽可能定位出只有1个元素，所以建议使用Css选择器进行定位。</p><p>在浏览器中找元素，可以在浏览器开发者工具中的Console中去找：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.HellWorld'</span><span class="token punctuation">)</span>  # 通过css选择器# 也可以通过下方这些方法来找元素document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Page层</p><p>元素找到后，写进Ele_config.ini配置文件即可：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[PageName]</span>  # 与页面名称一致<span class="token constant">UserName</span> <span class="token attr-value"><span class="token punctuation">=</span> css>.el-input__inner>0</span><span class="token constant">PassWord</span> <span class="token attr-value"><span class="token punctuation">=</span> classname>el-input__inner>1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后，在Page层按照页面名称xxx_page.py进行命名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySe<span class="token punctuation">.</span>operation <span class="token keyword">import</span> PySelenium  <span class="token comment"># 这是selenium的二次封装</span><span class="token comment"># 登录&amp;退出</span><span class="token keyword">class</span> <span class="token class-name">LoginPage</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 类名与页面名称一致</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> driver<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>element <span class="token operator">=</span> PySelenium<span class="token punctuation">(</span>driver<span class="token punctuation">)</span>    <span class="token comment"># 清空输入框</span>    <span class="token keyword">def</span> <span class="token function">clear_input</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 根据页面操作进行命名</span>        self<span class="token punctuation">.</span>element<span class="token punctuation">.</span>element_clear<span class="token punctuation">(</span><span class="token string">'Login'</span><span class="token punctuation">,</span> <span class="token string">'UserName'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>element<span class="token punctuation">.</span>element_clear<span class="token punctuation">(</span><span class="token string">'Login'</span><span class="token punctuation">,</span> <span class="token string">'PassWord'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>具体PySelenium中的代码可以在<a href="https://github.com/DDDDanny/S-UIAutoTest/blob/master/PySe/operation.py">这里</a>查看</p></blockquote></li><li><p>接下来编写业务逻辑</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Test<span class="token punctuation">.</span>Page<span class="token punctuation">.</span>login_page <span class="token keyword">import</span> LoginPage<span class="token keyword">class</span> <span class="token class-name">LoginBusiness</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 根据业务场景进行命名</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> driver<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>login_Business <span class="token operator">=</span> LoginPage<span class="token punctuation">(</span>driver<span class="token punctuation">)</span>    <span class="token comment"># 登录成功</span>    <span class="token keyword">def</span> <span class="token function">login_suc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 根据业务流程进行命名</span>        self<span class="token punctuation">.</span>login_Business<span class="token punctuation">.</span>clear_input<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login_Business<span class="token punctuation">.</span>send_username<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login_Business<span class="token punctuation">.</span>send_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login_Business<span class="token punctuation">.</span>click_submit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>login_Business<span class="token punctuation">.</span>get_org_name<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 数据传递，一般情况下用于断言，当需要返回的多个数据时，使用list或tuple进行传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试用例基类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LoginBaseCase</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    driver <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token decorator annotation punctuation">@LogInfo<span class="token punctuation">.</span>get_error</span>    <span class="token keyword">def</span> <span class="token function">setUpClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 用例集开始执行时运行</span>        <span class="token comment"># 初始化开始</span>        LogInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Initialization Start'</span><span class="token punctuation">)</span>        cls<span class="token punctuation">.</span>driver <span class="token operator">=</span> SelectBrowser<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>select_browser<span class="token punctuation">(</span>Browser<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cls<span class="token punctuation">.</span>dr <span class="token operator">=</span> PySelenium<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>driver<span class="token punctuation">)</span>        cls<span class="token punctuation">.</span>dr<span class="token punctuation">.</span>test_url<span class="token punctuation">(</span>ReadIni<span class="token punctuation">(</span><span class="token string">'Sys_config.ini'</span><span class="token punctuation">,</span> Evn<span class="token punctuation">)</span><span class="token punctuation">.</span>get_value<span class="token punctuation">(</span><span class="token string">'website_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cls<span class="token punctuation">.</span>dr<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 初始化完成</span>        LogInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Initialization Completed'</span><span class="token punctuation">)</span>        <span class="token comment"># 登录业务流程-测试用例</span>        LogInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Login Cases Suite Start'</span><span class="token punctuation">)</span>        cls<span class="token punctuation">.</span>login <span class="token operator">=</span> LoginBusiness<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>driver<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token decorator annotation punctuation">@LogInfo<span class="token punctuation">.</span>get_error</span>    <span class="token keyword">def</span> <span class="token function">tearDownClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 用例集结束执行时运行</span>        cls<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试用例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">from</span> Utils<span class="token punctuation">.</span>get_log <span class="token keyword">import</span> LogInfo<span class="token keyword">from</span> Utils<span class="token punctuation">.</span>read_ini <span class="token keyword">import</span> ReadIni<span class="token keyword">from</span> Utils<span class="token punctuation">.</span>global_value <span class="token keyword">import</span> Evn<span class="token keyword">from</span> Test<span class="token punctuation">.</span>Case<span class="token punctuation">.</span>base_case <span class="token keyword">import</span> LoginBaseCase<span class="token comment"># 继承测试用例基类，测试用例基类主要是用于初始化数据及前置和后置条件</span><span class="token keyword">class</span> <span class="token class-name">LoginCase</span><span class="token punctuation">(</span>LoginBaseCase<span class="token punctuation">,</span> LogInfo<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 根据测试场景进行命名</span>    <span class="token triple-quoted-string string">""" 登录&amp;退出测试用例 """</span>  <span class="token comment"># 注释一定要写，它会反馈到测试报告中</span>    <span class="token decorator annotation punctuation">@LogInfo<span class="token punctuation">.</span>get_error</span>    <span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 测试用例是以test_数字进行命名</span>        <span class="token triple-quoted-string string">""" 登录流程 """</span>  <span class="token comment"># 注释一定要写，它会反馈到测试报告中</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'TestCase1 Start Running'</span><span class="token punctuation">)</span>        <span class="token comment"># 获取用户名和密码</span>        username <span class="token operator">=</span> ReadIni<span class="token punctuation">(</span><span class="token string">'Sys_config.ini'</span><span class="token punctuation">,</span> Evn<span class="token punctuation">)</span><span class="token punctuation">.</span>get_value<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> ReadIni<span class="token punctuation">(</span><span class="token string">'Sys_config.ini'</span><span class="token punctuation">,</span> Evn<span class="token punctuation">)</span><span class="token punctuation">.</span>get_value<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token comment"># 获取Org名称</span>        org_name <span class="token operator">=</span> self<span class="token punctuation">.</span>login<span class="token punctuation">.</span>login_suc<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">,</span> org_name<span class="token punctuation">,</span> <span class="token string">'说明文字不一致 --- 测试用例不通过'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@LogInfo<span class="token punctuation">.</span>get_error</span>    <span class="token keyword">def</span> <span class="token function">test_2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" 退出流程 """</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'TestCase2 Start Running'</span><span class="token punctuation">)</span>        welcome <span class="token operator">=</span> self<span class="token punctuation">.</span>login<span class="token punctuation">.</span>logout_suc<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token string">'欢迎登录'</span><span class="token punctuation">,</span> welcome<span class="token punctuation">,</span> <span class="token string">'首页欢迎语句错误 --- 测试用例不通过'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><ul><li>相对于其他自动化测试，UI自动测试是一项成本较高的测试活动，所以是否需要做UI自动化测试，是要根据实际项目和产品来确定，还需要考虑人力资源的成本；</li><li>UI自动化测试，整体来看没有什么难点，按照规则写就好。我认为，UI自动化测试最难最重要的就是元素定位，要在合适的地方用合适的方式去定位，才能达到最好的效果；</li><li>UI自动化测试稳定性是在中后期很重要的一件事，当测试用例越来越多，场景变的越来越复杂时，还有一些客观因素的存在，就会导致UI自动化测试的稳定性逐渐下降。稳定性下降是不可避免的，这是UI自动化测试弊端，但是我们要控制它下降的范围，我认为，500条用例的稳定性应该在（成功率）99.99%以上。所以，我们在写用例脚本时，应该去注意一些可能会影响稳定性的东西，比如说适当差分业务流程复杂的用例，删除一些稳定性很差的用例等；</li><li>我希望，这篇文章能对WebUI自动化测试感兴趣的人起到一点点🤏的帮助</li><li>写到现在，发现还有一些不是很好用的地方，我计划过段时间再次优化一下这个框架，嘿嘿～</li></ul>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>S-UIAutoTest（框架篇）</title>
    <link href="/2020/11/08/SUIAutoTestDesign/"/>
    <url>/2020/11/08/SUIAutoTestDesign/</url>
    
    <content type="html"><![CDATA[<p>上一篇文章主要写了，我为什么要做这个UI自动化测试框架，下面👇我来说说这个框架的构成。</p><a id="more"></a><h3 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h3><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p>​我所编写的UI自动化测试框架<code>S-UIAutoTest</code>是基于<code>Python3.7</code> +  <code>Selenium</code> + <code>unittest</code> ，采用PO设计模式，将页面与用例进行分离，提高代码复用性，降低了代码的维护成本。</p><h4 id="元素管理"><a href="#元素管理" class="headerlink" title="元素管理"></a>元素管理</h4><p>​我采用的是使用ini配置文件进行管理，因为它符合使用场景（节点代表页面、键值对代表元素），并且不依赖环境，使用和维护方便，所以最终我选择了使用ini配置文件对元素进行管理。</p><h4 id="页面层（Page）"><a href="#页面层（Page）" class="headerlink" title="页面层（Page）"></a>页面层（Page）</h4><p>​Page层与页面是有直接关系的，所以在写Page层的时候，一定要注重页面元素层级等等信息，找到规律、特性，这样才能写出复用性高、维护成本低的定位。</p><h4 id="业务层（Business）"><a href="#业务层（Business）" class="headerlink" title="业务层（Business）"></a>业务层（Business）</h4><p>​Business层是组装Page层元素的地方，根据测试用例，编写相应的测试业务逻辑（所有的判断和循环逻辑都写在这里）</p><h4 id="用例层（Case）"><a href="#用例层（Case）" class="headerlink" title="用例层（Case）"></a>用例层（Case）</h4><p>​Case层就是最终的测试用例层，由于主要的业务流程都在业务层（Business层）处理完成，所以Case层只需要进行Mock数据的生成和调用业务逻辑即可</p><h4 id="PySelenium"><a href="#PySelenium" class="headerlink" title="PySelenium"></a>PySelenium</h4><p>​Page层是建立在PySelenium之上的，PySelenium是对selenium的二次封装，它主要的工作就是用来处理元素定位和操作元素。PySelenium是整个框架的核心模块。</p><h4 id="其他模块"><a href="#其他模块" class="headerlink" title="其他模块"></a>其他模块</h4><h5 id="生成并发送测试报告"><a href="#生成并发送测试报告" class="headerlink" title="生成并发送测试报告"></a>生成并发送测试报告</h5><p>​测试报告是基于HTMLTestRunner生成的，生成报告后，通过邮件发送给指定人员。</p><h5 id="生成打印日志"><a href="#生成打印日志" class="headerlink" title="生成打印日志"></a>生成打印日志</h5><p>​日志信息的打印以及生成日志文件，我是基于logging写的日志生成器，实现打印各个等级的日志信息，并通过装饰器实现了捕获异常的功能。</p><p>以上就是<code>S-UIAutoTest</code>框架的组成和结构。</p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>S-UIAutoTest（需求篇）</title>
    <link href="/2020/11/01/SUIAutoTest/"/>
    <url>/2020/11/01/SUIAutoTest/</url>
    
    <content type="html"><![CDATA[<p>根据各种需求，我编写了WebUI自动化测试框架<a href="https://github.com/DDDDanny/S-UIAutoTest">S-UIAutoTest</a>，实现了WebUI自动化测试。这个系列文章，我会把我实现的整个过程都回顾记录下来，把知识和技能沉淀一下。</p><a id="more"></a><h3 id="需求篇"><a href="#需求篇" class="headerlink" title="需求篇"></a>需求篇</h3><h4 id="为什么要做UI自动化测试呢？"><a href="#为什么要做UI自动化测试呢？" class="headerlink" title="为什么要做UI自动化测试呢？"></a>为什么要做UI自动化测试呢？</h4><p>众所周知，测试金字塔中，UI层是在最顶部的，那么就意味这它是实施成本最高、维护成本最高，执行速度最慢的。而且UI自动化测试是在前端开发完成后执行，在发现Bug后，开发修复Bug的成本也是比较高的。</p><p>在这么多弊端的情况下，为什么还要选择UI自动化测试呢？</p><p>先肯定一点，做UI自动化测试是有价值的。</p><p>首先，做UI自动化测试并不是为了找Bug而去做的，而是为了提高测试人员的<code>测试效率</code>去做，它能够直接减少测试人员的工作量。UI自动化测试的使用场景大多是在冒烟测试和回归测试中，以保证基础功能和主要流程能够正常。</p><p>在迭代过程中，测试人员只需要关心迭代的内容，而基础功能和主要流程的测试就可以交给UI自动化测试去完成。</p><p>当产品的功能越来越多，越来越复杂的时候，UI自动化测试的价值就会越大。</p><p>有这么一种场景：</p><blockquote><p>开发人员要修改一个基础功能，这个功能在系统中有多处用到，他在修改的时候，漏掉了一个地方。</p><p>提测后，测试人员也遗漏了。</p><p>上线后，用户反馈功能使用不了，这时开发和测试才想起：还有这个地方没有改到呀！！！😨</p></blockquote><p>对于上面这种场景，我相信很多人都遇到过，当产品功能越来越多的时候，UI自动化测试的价值就越来越大，它能够保证重要及主要流程能够正常跑通，基础功能能够正常使用。</p><p>话说回来，当系统功能不多时，完全没有必要去做UI自动化测试，因为成本实在太高了！</p><p>怎么样算是系统功能不多呢？我个人认为，在回归测试中，只要手工测试能够在40min内完成就算系统功能不多。（根据心理学观点，成人注意力持续集中只有30—50分钟，超过这个时间，回归测试的准确度就会降低）</p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>对于软件测试的一些感悟</title>
    <link href="/2020/10/29/ForTester/"/>
    <url>/2020/10/29/ForTester/</url>
    
    <content type="html"><![CDATA[<p>我从事软件测试已经有4年了，干了这么久，多多少少有一些感悟。写这篇文章，是想说说我对软件测试的一下想法和感悟，其实主要想吐槽和说说现实😄</p><a id="more"></a><h3 id="初识软件测试"><a href="#初识软件测试" class="headerlink" title="初识软件测试"></a>初识软件测试</h3><p>我初识软件测试是在大学中，我参加了一次软件测试实训项目，从那个时候开始，我就对软件测试很感兴趣了，为什么呢？我觉得是主要有两点原因的：</p><ul><li>我自身的性格非常符合软件测试这个工作</li><li>它能给我带来一种成就感（ 最先使用到这个新功能的人😄 ）</li></ul><h3 id="软件测试难吗？有必要吗？"><a href="#软件测试难吗？有必要吗？" class="headerlink" title="软件测试难吗？有必要吗？"></a>软件测试难吗？有必要吗？</h3><p>通过第一次接触后，我觉得软件测试是一个非常具有挑战性的工作，而且想做好软件测试是非常不容易的。</p><p>但是很多人都认为，软件测试是一个非常简单的工作，说的简单点就是他只需要点点点，仔细一点就好。我觉得这么看软件测试的人，根本不了解什么是软件测试，根本不重视测试。</p><p>很多公司都没有软件测试的岗位，测试工作都是由开发完成的，虽然这样可以降低成本，但是软件质量保证不了，很大可能性导致损失的收益高于了测试人员的人力成本。</p><p>在现在这个时代，很多人都在做相同的产品，那么用户为什么选择使用你的产品呢？？？我认为有主要有三点原因：</p><ul><li>你的产品功能是用户所需要的（很多产品都会有相同的功能，所以这个并没有很大的优势）</li><li>你的价格很吸引用户（这个也不好去突破，因为成本放在那里）</li><li>你的产品质量很好（这个就是一个有力的竞争点）</li></ul><p>通过前两点，很难和其他产品拉开差距，那么只有通过软件产品质量来拉开差距，来让用户选择你。</p><p>软件测试的入门门槛很低，但是想把它做好很难。在最近这几年，相同的软件越来越多，而且人们对软件的质量要求越来越高，软件测试也越来越被重视，软件测试工程师也就成为了开发团队必不可少的成员。</p><h3 id="大大小小的坑"><a href="#大大小小的坑" class="headerlink" title="大大小小的坑"></a>大大小小的坑</h3><h4 id="不要完全相信开发说的话"><a href="#不要完全相信开发说的话" class="headerlink" title="不要完全相信开发说的话"></a>不要完全相信开发说的话</h4><p>​哈哈，这个坑是最有意思的。即使有完整的需求文档，即使改动很小，每个迭代开发阶段完成后，一定要去看看或者去问问，开发改了哪些地方，当然，这里是可信的，不可信的是开发人员说：“没事，这个地方你只用看看正常使用是否可以就行了”，一般这么说，我都慌的一批，因为很大可能性开发也不知道它会影响到什么地方🙄️，最后出问题了，他会说：“我就改了一行代码。。。怎么还影响到那里了呀”。</p><p>​所以不要完全相信开发说的话，在这种情况下，我们需要根据我们以往的经验和对产品的了解，来自己判断修改后的代码，会影响到哪些地方。</p><h4 id="不要抱有侥幸心理"><a href="#不要抱有侥幸心理" class="headerlink" title="不要抱有侥幸心理"></a>不要抱有侥幸心理</h4><p>这个侥幸心理指的是：</p><ul><li>我偷个懒，不测这个东西了，反正这次迭代也没有改这里</li><li>或是测试通过了一两种异常操作后，就放弃了对其他异常操作的测试，觉得不会有问题了</li></ul><p>往往抱有侥幸心理的时候，上线后，它很大概率会出问题！！！就是这么邪！</p><p>所以还是要认认真真的完成每一次测试任务，千万被抱有侥幸心理！</p><h4 id="测试的日常加班陪跑"><a href="#测试的日常加班陪跑" class="headerlink" title="测试的日常加班陪跑"></a>测试的日常加班陪跑</h4><p>测试加班陪跑是一件很难受的事，当开发流程并没有那么完善时，发布程序，可能会遇到各种问题，然后测试就在那等，一般等的时间都会超过回归测试的时间😅。。。</p><h4 id="冒烟测试一定要严格"><a href="#冒烟测试一定要严格" class="headerlink" title="冒烟测试一定要严格"></a>冒烟测试一定要严格</h4><p>当没有冒烟测试或是冒烟测试不严格时，测试的时间一定会被压缩，被压缩的后果就是加班或是发布后的程序质量不高。所以冒烟测试一定要严格，冒烟测试不通过，直接打回重做！</p><h4 id="回归测试一定要做"><a href="#回归测试一定要做" class="headerlink" title="回归测试一定要做"></a>回归测试一定要做</h4><p>回归测试是一件非常重要的一件事，因为程序在上线后，可能会出现在之前测试过程中没有的Bug，还会发现一些没有发现的Bug。如果你偷懒没有做一部分的回归测试，很大可能性，这个地方会出问题，别问为什么，问就是遇到过。所以回归测试提升软件质量的一个重要阶段，一定要认真对待。</p><h3 id="关于研发-amp-测试流程"><a href="#关于研发-amp-测试流程" class="headerlink" title="关于研发&amp;测试流程"></a>关于研发&amp;测试流程</h3><p>​我所知道的比较完整的研发&amp;测试流程是这样的：</p><blockquote><p>需求调研、可行性分析、需求评审、UI评审、用例评审、开发阶段、冒烟测试、测试阶段、ShowCase、发布上线、回归测试、迭代复盘</p></blockquote><p>​这一套流程我认为是比较完整的，看似很简单，但是能够落地是很困难的，这里需要很多人的支持和互相磨合才能够真正的落地实施。有一套完整的研发&amp;测试流程，是一定可以提高整个迭代效率的。</p><p>​对于一些小公司来说，可能都没有测试人员，就更别提有完整的研发&amp;测试流程了，这是非常正常的，也别抱怨工作效率低，这也许是对你能力提升的一个机会！</p><h3 id="关于职业规划"><a href="#关于职业规划" class="headerlink" title="关于职业规划"></a>关于职业规划</h3><p>软件测试有三个大的发展方向：管理岗、技术岗和转行</p><p>软件测试有三个阶段：功能测试工程师、自动化测试工程师和测试开发工程师</p><p>三个阶段并不是说我们必须提升编程技能，来通过三个阶段，如果你在某一个阶段干的非常非常好，也是没有问题的，但是你不可以不了解它们，你懂的。</p><p>当你对编程没有什么兴趣，对技术没有渴求时，我建议别走技术路线了，因为即使强行走了，也是走不远的，而且它会因为你的没有兴趣，而变得复杂、累赘、疲惫。。。</p><p>具体往哪个方向发展，需要根据自身的条件来判断。无论你选择哪个方向，软件测试最重要的是对<code>业务</code>的熟悉，当你对业务非常熟悉时，你的价值才会逐渐提升。</p><p>当然如果你干了一段时间，发现这个工作不适合你，那么你也可以选择转行。</p><h3 id="软件测试态度"><a href="#软件测试态度" class="headerlink" title="软件测试态度"></a>软件测试态度</h3><p>关于软件测试态度，我只想说一个概念“工匠精神”。</p><p>什么是工匠精神呢，我这里用几个关键词来概括一下：<code>敬业</code>、<code>高要求</code>、<code>注重细节</code>、<code>追求完美</code>、<code>执着</code></p><p>做软件测试一定要有工匠精神，因为我们是最后的把关者，从我们手里出去的软件产品，就是要面向用户的，所以我们的工作和态度非常重要。虽然说一个产品不可能没有Bug，但是作为测试，我们不应该这么想，我们应该追求完美，追求零Bug，这才是我们测试人员该有的态度。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>以上所说的只是我个人的一些感悟，希望所有的软件测试工程师，不要太累，放平心态，注意身体😄</p>]]></content>
    
    
    <categories>
      
      <category>测试经验</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python实现日志记录功能</title>
    <link href="/2019/08/25/PythonLogNote/"/>
    <url>/2019/08/25/PythonLogNote/</url>
    
    <content type="html"><![CDATA[<p>最近在写接口自动化框架，需要日志记录功能，就研究了下，写的不算特别好，遵从先实现再优的原则嘛😜，这次呢，我就说下我实现的整个过程。</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>主要需求嘛，就两点：</p><ol><li>在控制台能够打印日志，方便debug</li><li>将日志写入在文件中，方便部署后查找问题</li></ol><p>其他拓展需求嘛，有三点：</p><ol><li>能够控制日志等级进行日志输出</li><li>能够捕获系统错误并进行日志输出</li><li>有可以控制是否输出到文件的开关</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>两个主要需求都很好实现，主要用到的是python内置的logging模块，logging模块内容比较多，在网上很好找，就不在这赘述了。</p><p>不多说，直接上代码🧐</p><h3 id="Log生成及输出：get-logs-py"><a href="#Log生成及输出：get-logs-py" class="headerlink" title="Log生成及输出：get_logs.py"></a>Log生成及输出：get_logs.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> logging<span class="token keyword">class</span> <span class="token class-name">TestLogs</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>        <span class="token comment"># 设置日志输出格式</span>        formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>            <span class="token string">'[%(asctime)s]-[%(levelname)s] %(filename)s--> %(funcName)s ----->%(message)s'</span>        <span class="token punctuation">)</span>        <span class="token comment"># 设置控制台日志信息</span>        console <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>        <span class="token comment"># 设置级别日志级别,Logging中有NOTSET &lt; DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL这几种级别，日志会记录设置级别以上的日志</span>        console<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>console<span class="token punctuation">)</span>        <span class="token comment"># 生成日志文件的开关，为debug模式，不生成文件</span>        <span class="token keyword">if</span> GetValue<span class="token punctuation">.</span>is_debug <span class="token operator">==</span> <span class="token string">'False'</span><span class="token punctuation">:</span>            <span class="token comment"># 生成文件路径</span>            file_name <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".log"</span>            <span class="token comment"># 获取当前目录的绝对路径</span>            cur_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>            <span class="token comment"># 获取logs文件夹的绝对路径</span>            logs_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>sep <span class="token operator">+</span> <span class="token string">'../logs/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            <span class="token comment"># 设置文件日志信息</span>            file_handle <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>logs_path <span class="token operator">+</span> file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            file_handle<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>            file_handle<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>file_handle<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_log</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>logger<span class="token keyword">class</span> <span class="token class-name">LogInfo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    log <span class="token operator">=</span> TestLogs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> TestLogs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_log<span class="token punctuation">(</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is a debug log'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is a info log'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is a error log'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is a warning log'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>代码中GetValue是一个我自己写的读取ini配置文件的类，读取is_debug的值，作为是否成功文件日志的开关；</li><li>生成文件名称时，我把日志时间格式化了一下，格式化前：2019-08-25 21:55:48,897；</li><li>在设置文件日志的时候，一定要设置encoding=’utf-8’，不然会乱码；</li><li>LogInfo这个类是为了方便之后在其他文件中使用而写，只要继承这个类，就直接可以使用；</li><li>顺带提一下，这里文件路径，我用的是绝对路径，因为这里如果使用相对路径，会有个巨大的坑（单独运行测试用例报错）</li></ol><h3 id="get-logs-py的使用"><a href="#get-logs-py的使用" class="headerlink" title="get_logs.py的使用"></a>get_logs.py的使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> common<span class="token punctuation">.</span>get_log <span class="token keyword">import</span> LogInfo<span class="token keyword">class</span> <span class="token class-name">LoginApiTest</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">,</span> GetValue<span class="token punctuation">,</span> LogInfo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""登录接口"""</span>    <span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""账号密码正确"""</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"password"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token string">"userName"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>username<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 打印日志</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        code <span class="token operator">=</span> r<span class="token punctuation">.</span>status_code        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：这是在测试用例中使用，继承了LogInfo，直接self.log就可以使用写日志了。</p><h3 id="输出异常日志"><a href="#输出异常日志" class="headerlink" title="输出异常日志"></a>输出异常日志</h3><p>我在LogInfo下写了个装饰器专门处理异常日志</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> functools<span class="token keyword">import</span> traceback<span class="token keyword">class</span> <span class="token class-name">LogInfo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    log <span class="token operator">=</span> TestLogs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_log<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">get_error</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        get_error装饰器，用于获取错误信息并且写入日志        :param func: 入参函数        :return:        """</span>        <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">wrapper_func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                func<span class="token punctuation">(</span>self<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>log<span class="token punctuation">.</span>error<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'系统出现异常，请及时处理！'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> wrapper_func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：简单地说，测试用例作为func传进来，执行try…except…，达到输出异常日志的目的。哦，这里用到了traceback模块，它专门用来获取异常信息。traceback模块详细的内容，网上有很多，我就不再赘述了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> common<span class="token punctuation">.</span>get_log <span class="token keyword">import</span> LogInfo<span class="token keyword">class</span> <span class="token class-name">LoginApiTest</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">,</span> GetValue<span class="token punctuation">,</span> LogInfo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""登录接口"""</span>    <span class="token decorator annotation punctuation">@LogInfo<span class="token punctuation">.</span>get_error</span>    <span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：直接使用装饰器即可，当系统抛出异常时，就可以记录日志啦😝</p><p>至此，5点需求就全部完成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般日志我使用继承的方式实现，日志可随意添加；异常日志我使用装饰器的方式，对每一个测试用例进行监控。</p><p>目前，我个人认为，我采用的方式算是比较好的，添加日志也比较顺手。</p><p>之后在使用的过程中，我会继续优化，让它变得更好，更优美😏</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
